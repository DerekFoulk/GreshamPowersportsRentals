
<div class="row row-cols-1 g-3">
    <div class="col">
        @if (Sizes is not null)
        {
            var id = $"size-input-{IdSuffix}";

            <label for="@id" class="form-label">Size</label>
            <InputSelect TValue="string"
                         Value="SelectedSize"
                         ValueChanged="OnSizeChangedAsync"
                         ValueExpression="@(() => SelectedSize)"
                         id="@id"
                         class="form-select"
                         aria-label="Size Selector">
                @foreach (var size in Sizes)
                {
                    <option value="@size">@size</option>
                }
            </InputSelect>
        }
    </div>
    <div class="col">
        @if (Colors is not null)
        {
            var id = $"color-input-{IdSuffix}";

            <label for="@id" class="form-label">Color</label>
            <InputSelect TValue="string"
                         Value="SelectedColor"
                         ValueChanged="OnColorChangedAsync"
                         ValueExpression="@(() => SelectedColor)"
                         id="@id"
                         class="form-select"
                         aria-label="Color Selector">
                @foreach (var color in Colors)
                {
                    <option value="@color">@color</option>
                }
            </InputSelect>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public Model? Model { get; set; }

    [Parameter]
    public EventCallback<Bike> SelectedBikeChanged { get; set; }

    protected List<string>? Sizes { get; set; }

    protected string? SelectedSize { get; set; }

    protected List<string>? Colors { get; set; }

    protected string? SelectedColor { get; set; }

    protected string? IdSuffix => Model?.Id.ToString("N");

    protected override async Task OnInitializedAsync()
    {
        if (Model is null)
            return;

        var bike = Model.Bikes.First();
        SelectedSize = bike.Size;
        SelectedColor = bike.Color;
        await SelectedBikeChanged.InvokeAsync(bike);

        var sizes = Model.Bikes.Select(x => x.Size).Distinct().ToList();
        Sizes = sizes;

        var colors = Model.Bikes.Select(x => x.Color).Distinct().ToList();
        Colors = colors;
    }

    private async Task OnSizeChangedAsync(string size)
    {
        if (SelectedSize == size)
            return;

        SelectedSize = size;

        await OnValuesChangedAsync();
    }

    private async Task OnColorChangedAsync(string color)
    {
        if (SelectedColor == color)
            return;
        
        SelectedColor = color;

        await OnValuesChangedAsync();
    }

    private async Task OnValuesChangedAsync()
    {
        if (Model is null)
            return;

        var bikes = Model.Bikes;
        var bike = bikes.Single(x => x.Size.Equals(SelectedSize, StringComparison.OrdinalIgnoreCase) && x.Color.Equals(SelectedColor, StringComparison.OrdinalIgnoreCase));

        await SelectedBikeChanged.InvokeAsync(bike);
    }

}
