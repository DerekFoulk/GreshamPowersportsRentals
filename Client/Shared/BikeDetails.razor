@using BlazorApp.Shared
@using System.Web
@using BlazorApp.Shared.Extensions

@if (Bike is null)
{
    <Spinner />
}
else
{
    <Card>
        <CardHeader>@Bike.Model</CardHeader>
            <CardBody>
                <Tabs>
                    <Tab Title="Summary" IsActive="true">
                        <Content>
                            <div class="p-3">
                                <div class="row">
                                    @* <div class="col-md-7">
                                        @DescriptionMarkupString
                                    </div> *@
                                    <div class="col-md-7">
                                        <img class="product-image float-start me-3 mb-3" src="https://placehold.co/350x250?text=@(HttpUtility.UrlEncode(Bike.Model))" alt="@Bike.Model" />
                                        @DescriptionMarkupString
                                    </div>
                                    <div class="col-md-2">
                                        <ul class="list-group">
                                            <li class="list-group-item">
                                                <input class="form-check-input me-1" type="checkbox" value="" id="firstCheckboxStretched">
                                                <label class="form-check-label stretched-link" for="firstCheckboxStretched">Helmet</label>
                                                <span class="text-success fw-bolder float-end">$0.00</span>
                                            </li>
                                            <li class="list-group-item">
                                                <input class="form-check-input me-1" type="checkbox" value="" id="secondCheckboxStretched">
                                                <label class="form-check-label stretched-link" for="secondCheckboxStretched">Lock</label>
                                                <span class="text-success fw-bolder float-end">$0.00</span>
                                            </li>
                                        </ul>
                                    </div>
                                    <div class="col-md-3 text-center">
                                        <div class="top-row g-3">
                                            <div class="col-12">
                                                <span class="h1 d-block">@Price?.ToString("C")</span>
                                                <small class="text-muted d-block"><em>@(Bike.PricePerHour.ToString("C"))/hr</em></small>
                                            </div>
                                            <div class="col-12">
                                                (Size dropdowns here)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </Content>
                    </Tab>
                    <Tab Title="Info">
                        <Content>
                            <div class="p-3">
                                <p>More details can be found at <a href="https://www.specialized.com/us/en/rockhopper-expert/p/199626?color=319772-199626" target="_blank">https://www.specialized.com/us/en/rockhopper-expert/p/199626?color=319772-199626</a>.</p>
                            </div>
                        </Content>
                    </Tab>
                </Tabs>
            </CardBody>
        </Card>
}

@code {
    [Inject]
    ILogger<BikeDetails>? Logger { get; set; }

    [CascadingParameter]
    [EditorRequired]
    public Rental? Rental { get; set; }

    [Parameter]
    [EditorRequired]
    public Bike? Bike { get; set; }

    protected MarkupString DescriptionMarkupString { get; set; }

    protected decimal? Price { get; set; }

    protected override void OnInitialized()
    {
        if (Bike?.Description != null)
            DescriptionMarkupString = new MarkupString(Bike.Description);
    }

    protected override void OnParametersSet()
    {
        Price = CalculatePrice();
    }

    private decimal? CalculatePrice()
    {
        Logger?.LogDebug("Calculating price...");

        if (Rental is null || Bike is null)
        {
            Logger?.LogWarning("Cannot calculate price because either 'Rental' or 'Bike' is null");

            return null;
        }

        var rentalStart = Rental.StartDate.ToDateTime(Rental.StartTime);
        var rentalEnd = Rental.EndDate.ToDateTime(Rental.EndTime);

        Logger?.LogDebug($"Rental Start: {rentalStart}");
        Logger?.LogDebug($"Rental End: {rentalEnd}");

        var duration = rentalEnd - rentalStart;

        Logger?.LogDebug($"Duration: {duration}");

        var hours = (decimal)duration.TotalHours;
        var price = hours * Bike.PricePerHour;

        Logger?.LogDebug($"Bike Price per Hour: {Bike.PricePerHour:C}");

        Logger?.LogDebug($"Price: {price:C}");

        return price;
    }

}
