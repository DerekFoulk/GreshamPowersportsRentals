@inject HttpClient Http

@inject ILogger<ModelSelector> Logger

@if (_models is not null)
{
    <Alert Color="AlertColor.Info">
        <Icon Name="IconName.InfoCircle" />
        Only showing the first 3 results for this category during development. The full Specialized catalog is available, but pagination is not yet implemented. Thus, for now, we're only showing the first 3 results.
    </Alert>
    <div class="row g-3 mb-3" id="@ModelSelectorId">
        @foreach (var model in _models)
        {
            <div class="col-12">
                <ModelDetails Model="@model"
                              Rental="@Rental"/>
            </div>
        }
    </div>
}

@code {
    private const string ModelSelectorId = "model-selector";
    
    private Model[]? _models;

    [Parameter]
    [EditorRequired]
    public Category? Category { get; set; }

    [Parameter]
    [EditorRequired]
    public Rental? Rental { get; set; }

    [Parameter]
    public EventCallback<Rental?> RentalChanged { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _models = null;

        try
        {
            var models = await Http.GetFromJsonAsync<Model[]>("/api/Models") ?? new Model[] { };

            var filteredModels = models
                .Where(x => x.Category.Id.Equals(Category?.Id))
                .OrderByDescending(x => x.PricePerHour)
                .ThenBy(x => x.Name)
                .ToArray();

            // TODO: Remove limiter
            _models = filteredModels.Take(3).ToArray();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to load models");
        }
    }

}
