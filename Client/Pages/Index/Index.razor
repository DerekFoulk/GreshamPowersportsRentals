@page "/"
@inject ILogger<Index> Logger
@inject HttpClient Http

<PageTitle>Rentals - Gresham Powersports</PageTitle>

<div class="container-fluid">
    <h1>Rentals</h1>

    @if (Rental is not null)
    {
        <EditForm Model="@Rental"
                  OnValidSubmit="@Submit"
                  name="rental-form">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <div class="row g-3 mb-3">
                <div class="col-12">
                    <h2>Choose Dates</h2>
                </div>
                @* ReSharper disable once Html.IdNotResolved *@
                <label for="start-date" class="col-sm-2 col-form-label text-bold">From</label>
                <div class="col-sm-5 col-md-4 col-lg-3 col-xl-2">
                    <DateInput ElementId="start-date"
                               TValue="DateOnly"
                               @bind-Value="@Rental.StartDate"
                               Placeholder="Enter a Start Date" />
                </div>
                <div class="col-sm-5 col-md-4 col-lg-3 col-xl-2">
                    <TimeInput ElementId="start-time"
                               TValue="TimeOnly"
                               @bind-Value="@Rental.StartTime"
                               Placeholder="Enter a Start Time" />
                </div>
            </div>
            <div class="row g-3 mb-3">
                @* ReSharper disable once Html.IdNotResolved *@
                <label for="end-date" class="col-sm-2 col-form-label">To</label>
                <div class="col-sm-5 col-md-4 col-lg-3 col-xl-2">
                    <DateInput ElementId="end-date"
                               TValue="DateOnly"
                               @bind-Value="@Rental.EndDate"
                               Placeholder="Enter Date" />
                </div>
                <div class="col-sm-5 col-md-4 col-lg-3 col-xl-2">
                    <TimeInput ElementId="end-time"
                               TValue="TimeOnly"
                               @bind-Value="@Rental.EndTime"
                               Placeholder="Enter a End Time" />
                </div>
                <div class="col-12">
                    <h2>Type of Bike</h2>
                </div>
                <div class="col-12">
                    <CategorySelector @bind-SelectedCategory="@SelectedCategory" />
                </div>
                <div class="col-12">
                    <ModelSelector Category="SelectedCategory"
                                   Rental="@Rental" />
                </div>
                <div class="col-12">
                    <Cart Rental="@Rental" />
                </div>
                <div class="col-12">
                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        @* ReSharper disable once Html.AttributeValueNotResolved *@
                        <Button Type="ButtonType.Submit"
                                Color="ButtonColor.Primary">
                            Submit
                        </Button>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>

@code{
    public Rental? Rental { get; set; }

    public Category? SelectedCategory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var now = DateTime.Now;
        var start = now.AddHours(1);
        var end = start.AddDays(1);

        Rental = await GetSampleRentalAsync();

        Rental ??= new Rental
        {
            StartDate = DateOnly.FromDateTime(start),
            StartTime = TimeOnly.FromDateTime(start),
            EndDate = DateOnly.FromDateTime(end),
            EndTime = TimeOnly.FromDateTime(end)
        };
    }

    private async Task<Rental> GetSampleRentalAsync()
    {
        Logger.LogTrace("Generating a sample rental");

        var start = DateTime.Now.AddDays(3);
        Logger.LogTrace($"Starts: {start}");

        var end = DateTime.Now.AddDays(3);
        Logger.LogTrace($"Ends: {end}");

        Logger.LogTrace("Getting bikes from the Bikes API");

        var bikes = await Http.GetFromJsonAsync<Bike[]>("/api/Bikes") ?? new Bike[] { };

        Logger.LogTrace($"Received {bikes.Length} from the Bikes API");

        var rental = new Rental
        {
            StartDate = DateOnly.FromDateTime(start),
            StartTime = TimeOnly.FromDateTime(start),
            EndDate = DateOnly.FromDateTime(end),
            EndTime = TimeOnly.FromDateTime(end),
            Bikes = bikes.Where(x => x is not null && x.IsAvailable).Take(3).ToList()
        };

        Logger.LogTrace("Sample rental was generated successfully");
        
        Logger.LogTrace(rental.ToString());

        return rental;
    }

    private void Submit()
    {
        if (Rental is null)
            throw new NullReferenceException($"{nameof(Rental)} ({typeof(Rental).FullName}) cannot be null");

        Logger.LogInformation($"{nameof(BlazorApp.Shared.Models.Rental)} #{Rental.Id} ({Rental.StartDate}-{Rental.EndDate}) submitted @ {DateTime.Now}");
    }
}