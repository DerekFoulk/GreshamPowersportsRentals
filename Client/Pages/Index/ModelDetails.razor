@inject ILogger<ModelDetails> Logger

@if (Model is not null)
{
    <Card>
        <CardHeader>@Model.Name</CardHeader>
        <CardBody>
            <div class="row g-3">
                <div class="col-md-6 col-xl-8">
                    <Tabs>
                        <Tab Title="Summary"
                             IsActive="true">
                            <Content>
                                <div class="row row-cols-1 row-cols-lg-2 g-3 p-3">
                                    <div class="col">
                                        @if (SelectedBike is not null)
                                        {
                                            var alt = $"{SelectedBike.Size} {Model.Name} ({SelectedBike.Color})";

                                            <img class="img-fluid" src="@SelectedBike.Images.First()" alt="@alt"/>
                                        }
                                    </div>
                                    <div class="col">
                                        @Model.Description
                                    </div>
                                </div>
                            </Content>
                        </Tab>
                        <Tab Title="Info">
                            <Content>
                                <div class="p-3">
                                    <p>Please call (503) 912-0493 for more info.</p>
                                </div>
                            </Content>
                        </Tab>
                    </Tabs>
                </div>
                <div class="col-sm-6 col-md-3 col-xl-2">
                    <ul class="list-group">
                        @{
                            var idSuffix = Guid.NewGuid().ToString("N");
                            var helmetId = $"helmet-checkbox-{idSuffix}";
                            var lockId = $"lock-checkbox-{idSuffix}";
                        }
                        <li class="list-group-item text-center text-bg-dark">
                            <span class="h3 align-middle">Extras</span>
                        </li>
                        <li class="list-group-item">
                            <input class="form-check-input me-1" type="checkbox" value="" id="@helmetId">
                            <label class="form-check-label stretched-link" for="@helmetId">Helmet</label>
                            <span class="text-success fw-bolder float-end">$0.00</span>
                        </li>
                        <li class="list-group-item">
                            <input class="form-check-input me-1" type="checkbox" value="" id="@lockId">
                            <label class="form-check-label stretched-link" for="@lockId">Lock</label>
                            <span class="text-success fw-bolder float-end">$0.00</span>
                        </li>
                    </ul>
                </div>
                <div class="col-sm-6 col-md-3 col-xl-2 text-center">
                    <div class="row row-cols-1 g-3">
                        <div class="col">
                            <span class="h1 d-block">@Price?.ToString("C")</span>
                            <small class="text-muted d-block"><em>@(Model.PricePerDay.ToString("C"))/day</em></small>
                            <small class="text-muted d-block"><em>@(Model.PricePerWeek.ToString("C"))/week</em></small>
                        </div>
                        <div class="col">
                            <CascadingValue Value="Model">
                                <BikeSelector SelectedBikeChanged="OnSelectedBikeChanged" />
                                @* <SizeSelector /> *@
                            </CascadingValue>
                        </div>
                        <div class="col">
                            <div class="d-grid gap-3">
                                <Button Type="ButtonType.Button"
                                        Color="ButtonColor.Primary"
                                        @onclick="OnAddToCartButtonClicked">
                                    <Icon Name="IconName.CartPlus"/>
                                    Add to Cart
                                </Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </CardBody>
    </Card>
}

@code {
    [CascadingParameter]
    [EditorRequired]
    public Rental? Rental { get; set; }

    [Parameter]
    [EditorRequired]
    public Model? Model { get; set; }

    public Bike? SelectedBike { get; set; }

    protected decimal? Price { get; set; }

    protected override void OnParametersSet()
    {
        if (Model is null)
            throw new NullReferenceException($"'{nameof(Model)}' cannot be null");

        SelectedBike = Model.Bikes.First();

        try
        {
            Price = CalculatePrice();
        }
        catch (Exception e)
        {
            Logger?.LogError(e, "Cannot calculate price");

            throw;
        }
    }

    private decimal CalculatePrice()
    {
        Logger?.LogTrace("Calculating price");

        if (Model is null)
            throw new InvalidOperationException($"'{nameof(Model)}' must not be null");

        if (Rental is null)
            throw new InvalidOperationException($"'{nameof(Rental)}' must not be null");

        var rentalStart = Rental.StartDate.ToDateTime(Rental.StartTime);
        var rentalEnd = Rental.EndDate.ToDateTime(Rental.EndTime);

        Logger?.LogTrace($"Rental Start: {rentalStart}");
        Logger?.LogTrace($"Rental End: {rentalEnd}");

        var duration = rentalEnd - rentalStart;

        Logger?.LogTrace($"Duration: {duration}");

        var days = (decimal)duration.TotalDays;

        if (days < 1)
            days = 1;

        var price = days * Model.PricePerDay;

        Logger?.LogTrace($"Bike Price per Day: {Model.PricePerDay:C}");

        Logger?.LogTrace($"Price: {price:C}");

        return price;
    }

    private void OnSelectedBikeChanged(Bike bike)
    {
        SelectedBike = bike;
    }

    private void OnAddToCartButtonClicked()
    {
        if (Rental is null)
            throw new NullReferenceException($"'{nameof(Rental)}' cannot be null");

        if (SelectedBike is null)
            throw new NullReferenceException($"'{nameof(SelectedBike)}' cannot be null");

        Logger.LogTrace($"Adding '{SelectedBike}' to the rental");

        Rental.Bikes.Add(SelectedBike);
    }

}
